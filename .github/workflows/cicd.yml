# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]
  # pull_request:
  #   branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # permissions:
    #   contents: read

    steps:
    # - uses: actions/checkout@v4
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    #setting jdk
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'

    # 현재 디렉토리 경로 출력
    - name: Show current directory
      run: |
        pwd
        ls -la

   # 디렉토리 내부 구조 확인
    - name: Show src/main/resources directory
      run: |
        ls -la ./src/main/resources

   # application.yml 파일이 존재하는지 확인
    - name: Check if application.yml exists
      run: |
        ls -la ./src/main/resources/application.yml
    #Setting yml
    - name: Convert to dev YML
      run: |
        if [ -e "./src/main/resources/application.yml" ]; then rm ./src/main/resources/application.yml; fi
        echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml
        
    #gradlew chmod
    - name: Grant execute permission for gradlew 
      run: chmod +x ./gradlew
      
    # Spring Boot Build
    - name: Spring Boot Build
      # working-directory: ./back # 작업 디렉토리 설정
      run: ./gradlew clean build -x test


#----------------- Docker --------

    - name: Docker Image Build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }} -f ./Dockerfile ./
      
    # DockerHub Login
    - name: Docker Hub Login
      uses: docker/login-action@v2 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }} 
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    # Docker Hub push
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}

#---------EC2----------
    #AWS EC2 Server Connect & Docken 명령어 실행
    - name: AWS EC2 Connection
      uses: appleboy/ssh-action@v0.1.6 
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        password: ${{ secrets.EC2_PASSWORD }}
        port: ${{ secrets.EC2_SSH_PORT }}
        timeout: 60s
        script: |
          sudo docker stop ${{ secrets.DOCKERHUB_IMAGENAME }}
          sudo docker rm ${{ secrets.DOCKERHUB_IMAGENAME }}
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
          sudo docker run -it -d -p 8080:8080 --name ${{ secrets.DOCKERHUB_IMAGENAME }} -e TZ=Asia/Seoul ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
